events {
  worker_connections  4096;  ## Default: 1024
}
http {
    error_log /dev/stderr debug;
    server {
        access_log /dev/stdout;

        #the correct resolver gets read from /etc/resolv.conf and substituted here
        #in our dockerfile
        resolver 127.0.0.11 valid=30s ipv6=off;
        resolver_timeout 5s;

        #we use variables so that nginx doesn't crash if the other containers aren't up when nginx starts
        set $api_sign_in http://api/users/signin_cac;
        set $api_9k http://api:9000;
        set $client http://client;
        set $client_3k http://client:3000;
        
        #we use 8443 because nginx doesn't run as root in openshift.  root is required for privileged ports
        listen 8443 ssl http2 default_server;
        listen [::]:8443 ssl http2 default_server;

        server_name localhost;

        ssl_certificate     /etc/nginx/certificate.pem;
        ssl_certificate_key /etc/nginx/key.pem;
        ssl_protocols       TLSv1.1 TLSv1.2;
        ssl_ciphers         HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        ssl_verify_client off;
        ssl_verify_depth 4; # Allow intermediate CAs
        ssl_client_certificate /etc/nginx/DoDRoots.crt;

        add_header Strict-Transport-Security max-age=15768000;

        root /www/data;

        location / {
            proxy_pass $client_3k;
        }

        location /sockjs-node {
            proxy_pass $client;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
        }

        location /graphql {
            proxy_pass $api_9k;
        }

        location /api {
            proxy_pass $api_9k;
        }

        location /api/users/signin_cac {
            if ($ssl_client_verify != SUCCESS) {
                return 403;
            }
            proxy_pass $api_sign_in;
            proxy_set_header X-Subject-DN $ssl_client_s_dn;
        }
    }
}